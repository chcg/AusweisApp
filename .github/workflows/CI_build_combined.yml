name: CI_build_combined

on: [push, pull_request]

jobs:
  build:

    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release]
        build_platform: ["NMake Makefiles JOM"]

    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Add nmake
      uses: ilammy/msvc-dev-cmd@v1

    - name: generate cmake libs
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -B c:\_build_libs  D:\a\AusweisApp\AusweisApp\libs

    - name: build cmake libs
      run: |
           cmake --build c:\_build_libs --config ${{ matrix.build_configuration }}

    - name: generate cmake
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_PREFIX_PATH=c:\_build_libs\dist D:\a\AusweisApp\AusweisApp  -B c:\_build

    - name: build cmake
      run: |
           cmake --build c:\_build --config ${{ matrix.build_configuration }} --target package

    - name: run ctest
      run: |
           ctest --test-dir c:\_build --output-on-failure -C "${{ matrix.build_configuration }}"



  build_linux_cmake:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release]
        build_platform: ["Ninja"]

    steps:
    - uses: actions/checkout@v4

    - name: Install packages via apt
      run: |
           sudo apt-get update -qq && sudo apt install -y cmake pkg-config libssl-dev libudev-dev libhttp-parser-dev libpcsclite-dev libgl1-mesa-dev libdbus-1-dev libclang-13-dev ninja-build

    - name: generate cmake libs
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -B _build_libs  ./libs

    - name: build cmake libs
      run: |
           cmake --build _build_libs --config ${{ matrix.build_configuration }}

    - name: generate cmake
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_PREFIX_PATH=./_build_libs/dist -B _build

    - name: build cmake
      run: |
           cmake --build _build --config ${{ matrix.build_configuration }}

    - name: run ctest
      run: |
           ctest --test-dir _build --output-on-failure -C "${{ matrix.build_configuration }}"


  build_linux_android_cmake:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release]
        build_platform: ["Unix Makefiles"]

    steps:
    - uses: actions/checkout@v4

    - name: Install packages via apt
      run: |
           sudo apt-get update -qq && sudo apt install -y cmake pkg-config libssl-dev libudev-dev libhttp-parser-dev libpcsclite-dev libgl1-mesa-dev libdbus-1-dev libclang-13-dev ninja-build
           sudo apt -y remove firefox microsoft-edge-stable google-chrome-stable kotlin libmono* mono-runtime

    - name: generate cmake libs
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_TOOLCHAIN_FILE=../cmake/android.toolchain.cmake -B _build_libs  ./libs

    - name: build cmake libs
      run: |
           cmake --build _build_libs --config ${{ matrix.build_configuration }}

    - name: generate cmake
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_PREFIX_PATH=./_build_libs/dist -DCMAKE_TOOLCHAIN_FILE=../cmake/android.toolchain.cmake -B _build

    - name: build cmake
      run: |
           cmake --build _build --config ${{ matrix.build_configuration }}

    - name: run ctest
      run: |
           ctest --test-dir _build --output-on-failure -C "${{ matrix.build_configuration }}"

  build_macos_cmake:

    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release]
        build_platform: ["Ninja"]

    steps:
    - uses: actions/checkout@v4

    - name: install ninja
      run: |
           brew install ninja

    - name: generate cmake libs
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -B _build_libs  ./libs

    - name: build cmake libs
      run: |
           cmake --build _build_libs --config ${{ matrix.build_configuration }}

    - name: generate cmake
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_PREFIX_PATH=./_build_libs/dist -B _build

    - name: build cmake
      run: |
           cmake --build _build --config ${{ matrix.build_configuration }}

    - name: run ctest
      run: |
           ctest --test-dir _build --output-on-failure -C "${{ matrix.build_configuration }}"


  build_ios_cmake:

    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        build_configuration: [Release]
        build_platform: ["Unix Makefiles"]

    steps:
    - uses: actions/checkout@v4

    - name: generate cmake libs
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_TOOLCHAIN_FILE=../cmake/iOS.toolchain.cmake -B _build_libs  ./libs

    - name: build cmake libs
      run: |
           cmake --build _build_libs --config ${{ matrix.build_configuration }}

    - name: generate cmake
      run: |
           cmake -G "${{ matrix.build_platform }}" -DCMAKE_BUILD_TYPE="${{ matrix.build_configuration }}" -DCMAKE_PREFIX_PATH=./_build_libs/dist -DCMAKE_TOOLCHAIN_FILE=../cmake/iOS.toolchain.cmake -B _build

    - name: build cmake
      run: |
           cmake --build _build --config ${{ matrix.build_configuration }}

    - name: run ctest
      run: |
           ctest --test-dir _build --output-on-failure -C "${{ matrix.build_configuration }}"
